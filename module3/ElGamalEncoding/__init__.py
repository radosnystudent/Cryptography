from module2.sum_points import sumPoints
from module3.multiple_point import multPoint
from module1.prng import generateNumber
from module3.ElGamal_keys import LargeNumberRoot

def encodeElG(A, B, p, Q, P, M):
    x = generateNumber(0, (p + 1 - (2 * LargeNumberRoot(p))) % p)

    C_1 = multPoint(A, B, p, x, P[0], P[1])
    temp = multPoint(A, B, p, x, Q[0], Q[1])
    C_2 = sumPoints(A, B, p, M[0], M[1], temp[0], temp[1])

    return (C_1, C_2)


def testElEnc(param=False):
    A = 985487021788484437436713103381676411350189319115517630809482936843345302961106356764248597
    B = 4984725568969670490954065053055446177717282626797328613040442205729457781644339973492726123
    p = 7275637152949605397191062869087589305268826416203902676025543852365781993930070670634601359
    Q = (1859733423522807921537556587280278373018778723945077866335841026984756695533872750973383203, 2221415723705529494603362237538702810871518537067269952747134368932432130149327465664405538)
    P = (1695444155429954327540607838535876910632820871637181078650980138105897895052021574523213699, 1519240013266439060765246556434029348861809885495069699325229198616186449074710571206466118)
    M = (2867446875183256052031537039774367671775445152944601474079473188929089318410463119040942767, 5294841728111323418112139630701198251504444456804643873553944286707036686537875440949420827)
    if not param:
        print(encodeElG(A, B, p, Q, P, M))
    else:
        return [A, B, p, encodeElG(A, B, p, Q, P, M)]
